name: Deploy on Prod using Tags

on:
  push:
    tags:
      - v*prod

jobs:
  # Workflow de trabajo
  prod-deploy:
    # Entorno de servidor para el workflow
    runs-on: ubuntu-latest

    # Pasos a ejecutar del workflow
    steps:
      # Obtener el código
      - uses: actions/checkout@v2
      - name: Set release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      # Se cargan los submodulos
      - name: Clone submodule exceptions
        uses: actions/checkout@v2
        with:
          repository: Agros-Dev-Team/agros-exceptions
          path: exceptions
          ssh-key: ${{ secrets.SSH_KEY_SUBMODULES }}
          persist-credentials: true

      - name: Clone submodule middlewares
        uses: actions/checkout@v2
        with:
          repository: Agros-Dev-Team/middlewares
          path: middlewares
          ssh-key: ${{ secrets.SSH_KEY_SUBMODULES }}
          persist-credentials: true

      - name: Clone submodule services
        uses: actions/checkout@v2
        with:
          repository: Agros-Dev-Team/agros-services
          path: services
          ssh-key: ${{ secrets.SSH_KEY_SUBMODULES }}
          persist-credentials: true

      - name: Checkout submodules
        run: |
          git submodule init
          git submodule update

      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Config environments with S3
        env:
          BUCKET_ENV: ${{ secrets.AWS_BUCKET_ENV }}
          LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
        run: |
          aws s3 cp s3://$BUCKET_ENV/$LAMBDA_FUNCTION_NAME/.env.prod .env
          echo "PROJECT_API_VERSION=${{ env.RELEASE_VERSION }}">> .env

      - name: Login en Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Construir la imagen
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY}}
          IMAGE_TAG: ${{ env.RELEASE_VERSION }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . -f Dockerfile.aws
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Actualizar función lambda
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY}}
          FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME}}
          IMAGE_TAG: ${{ env.RELEASE_VERSION }}
        run: |
          aws lambda update-function-code --region ${{ secrets.AWS_REGION }} --function-name $FUNCTION_NAME --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
